/*
#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <cstring>
using namespace std;

int main(int argc, char** argv) {
	if (argc != 4) {
		cout << "Usage: ./a.out, target ip, start port, end port\n";
		return -1;
	}
	char* targetIP = argv[1];
	int startPort = atoi(argv[2]), endPort = atoi(argv[3]);
	struct sockaddr_in addr;
	struct sockaddr_in target_addr;
	int sock = 0;

	memset(&target_addr, '0', sizeof(target_addr));
	target_addr.sin_family = AF_INET;
	if (inet_pton(AF_INET, targetIP, &target_addr.sin_addr) <= 0) {
		cout << "Error converting target IP address to binary form\n";
		return -1;
	}
	for (int i = startPort; i <= endPort; i++) {
		target_addr.sin_port = htons(i);
		if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
			cout << "Error creating socket: ";
			cout << strerror(errno) << "\n";
			return -1;
		}
		if (connect(sock, (struct sockaddr*)&target_addr, sizeof(target_addr)) < 0) {
			cout << "Port " << i << " closed: ";
			cout << strerror(errno) << "\n";
		}
		else cout << "Port " << i << " open\n";
		close(sock);
	}

	return 0;
}
//192.168.0.1
*/